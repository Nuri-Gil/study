-- 어노테이션, 의존성
어노테이션 적용하려면 반드시 코드가 있어야 함
외부 라이브러리를 가져다 쓸 경우는 코드가 없으므로 설정을 해줘야 함
xml 혹은 java 설정을 해야 하는데 xml 은 스프링, java 는 부트에서 설정

-- 파라미터 수집과 변환
파라미터를 수집할 때는 2가지 방식이 있음
1. DTO 로 바로 수집하기
2. RequestParam 으로 수집하기 http://localhost:8080/sample/ex1?name=이름&age=30 같은 직접 GET 방식으로!

-- MODEL 이란?
Controller 에서 JSP 로 전달하는 데이터
마트에서 "컨트롤러" 가 "모델" 이라는 카트에 데이터를 담음 -> addAttribute
"모델" 에 들어간 데이터를 JSP 의 ${변수 및 객체 등등} 에 전달함
기존 코딩에서는 상속, 인터페이스를 이용하지만
Spring MVC 에서는 어노테이션을 이용함!! -> 파라미터에 추가만 해주면 됨

Model 타입의 addAttribute 메소드 -> 스프링 MVC에서 컨트롤러에서 뷰로 데이터를 전달하는 데 사용

기능과 목적
데이터 전달: addAttribute 메소드는 컨트롤러에서 뷰로 데이터를 전달하기 위해 사용
컨트롤러에서 처리한 결과나 사용자에게 보여줄 데이터를 모델에 추가하면, 이 데이터는 뷰(JSP, Thymeleaf 등)에서 사용 가능

키-값 쌍 추가: 메소드는 데이터를 키-값 쌍으로 추가
즉, 데이터는 특정 이름(키)으로 식별되며, 이 이름을 사용하여 뷰에서 데이터를 참조할 수 있음

다양한 데이터 타입 지원: addAttribute 는 객체부터 기본 자료형까지 다양한 데이터 타입을 지원
단순한 문자열부터 복잡한 객체, 리스트, 맵 등을 모델에 추가할 수 있습니다.

주요 용도
뷰에 데이터 전달: 주로 컨트롤러가 처리한 비즈니스 로직의 결과를 뷰로 전달할 때 사용
검색 결과, 사용자 정보, 화면에 표시할 목록 등을 모델에 추가하여 뷰에서 활용

동적 컨텐츠 생성: 클라이언트의 요청에 따라 동적으로 생성된 데이터를 뷰로 전달할 때 유용
사용자가 입력한 데이터를 처리한 후 그 결과를 뷰에 보여주는 경우에 addAttribute 를 사용하여 데이터를 전달

템플릿 엔진과의 호환성: 다양한 템플릿 엔진(예: JSP, Thymeleaf)에서 모델 데이터를 동일한 방식으로 접근할 수 있도록 지원


----- 09.07
SampleController 의 RedirectAttribute 부터 확인 할 것
ex00.controller.advice 의 CommonExceptionAdvice 클래스, views 의 error_page.jsp 확인할 것

-- Controller 의 리턴 타입
어노테이션 베이스가 되면 파라미터가 유연해짐
리턴 타입 역시 유연해짐 -> 고정값이 아님, 오버라이딩 개념이 아니기 때문
void -> 메서드의 호출 경로와 동일한 뷰
String -> 지정된 뷰
VO/DTO -> Ajax 를 이용해서 결과 데이터 자체를 전송할 경우, 자바 객체 타입 (Jackson-databind 같은 라이브러리 필요)
ResponseEntity<> -> HTTP 헤더 메시지와 내용물을 같이 전송 -> 그림 등의 데이터를 보낼 때 HTTP 의 Content-Type 과 데이터(바디)를 같이 보내는 등

Model/ModelAndView -> 스프링 1, 2 버전의 리턴 타입 (XXX)
HttpHeaders -> HTTP 헤더 메시지만 전송할 경우 (XXX)

-- 예외 처리
ControllerAdvice -> 컨트롤러에 문제가 생겼을 때 대신 처리해주는 기능을 빼놓은 것 (예외를 던지는 기능)
@ExceptionHandler (예외 클래스)
JSP 에서는 Model 에 전달한 객체 사용 가능

개발 영역 구분 -> 티어

{영속 영역} 테스트를 하는것을 권장
    DB SQL 문 -> MyBatis 의 Mapper.xml ->

{서비스 계층} 테스트가 옵션
    서비스 계층 ->

{컨트롤러}
    컨트롤러 ->

{뷰}
    jsp (결과데이터 출력 + 자바스크립트 핸들링)


--웹 에서 가장 먼저 시작하는 것 (책이랑 다름!)
/board/list 경로에서 시작 (GET) -> 화면에는 게시물의 리스트가 나옴
클릭등의 액션으로 /board/register(GET) -> 입력할 수 있는 내용이 나옴
-> 눌러서 등록하는 것은 POST 처리(BoardController 가 처리)
-> list 로 돌아가도록 (Redirect, GET 만 가능한 방식)
-> Post-Redirect-Get, PRG 패턴

board/list 대신 board/get/번호 (GET) 로 돌아가도록 (요즘에는 조회를 분리시키기 때문, 댓글 등의 조회를 처리하기 위해)
-> 조회가 끝나면 수정(/modify/번호), 삭제(/delete/번호) 로 가도록
-> 수정과 삭제가 끝나면 컨트롤러(BoardController) 가 수정과 삭제 처리를 하도록
-> 컨트롤러의 작업이 끝나면 조회 페이지로 다시 가도록 구현, 삭제를 하면 리스트로 가도록

github.com/ckck24/spring2024_part3

MariaDB 는 시퀀스를 사용하지 않아서 데이터가 들어가야지 번호가 생김

----- 10.07
-- Spring WEB 계층 처리
문법은 찾아서 할 수 있으나 단계를 건너뛰고 하지 말 것
접근 순서
URL(URI) 설계 -> Method (Get/Post) -> Query String/Params -> Controller -> Method -> VIEW

URL 설계 -> GET 혹은 Post -> 데이터를 던져서 숫자 등을 받아서 할것인가 혹은 ? 를 이용한 파라미터식(QueryString) 으로 할것인가
숫자 -> @PathVariable

-- Postman 프로그램 -> 브라우저에서 데이터를 보내는것을 흉내내서 테스트 가능
GET 방식의 경우에는 브라우저에서 바로 데이터를 보낼 수 있지만 POST 방식은 못보냄
POST 로 보낼 때 매번 화면에서 입력하는것을 대체해서 시도하기 위해 (Rest Client Program)
JUNIT 테스트를 건너뛰고 컨트롤러 개발 후 Postman 혹은 브라우저에서 동작 확인 후 JSP 개발

-- @PathVariable
게시판의 글을 읽는 /board/read/9 등의 경로에서 /read 뒤에 붙는 bno 에 따라 번호를 넣을 때 동적 변수처리를 할 수 있도록 하는 어노테이션
페이지 번호처럼 수정과 삭제등의 이유로 매번 바뀔 수 있는 변수는 QueryString 처럼 ? 로 받아 처리하는게 고정화 됨

/board/modify/번호 -> /board/read/번호 에서 수정 버튼을 누르면 화면이 수정으로 이동하도록
이동은 GET 방식, 수정과 삭제를 누르면 POST 방식으로 Controller 가 처리를 하고 원하는 페이지로 Redirection 할 수 있도록

-- 실제 처리는 POST 방식
PRG 패턴 -> Post, Redirect, Get
화면을 만들어서 Post 방식으로 보내면 처리가 됨. 처리를 하고 JSP 등을 사용해 결과를 받았다고 치자 (Redirect 없이)
이러면 브라우저에서 새로고침을 할 수 있는데 이렇게 되면 주소에 있는 정보를 다시 보냄 -> 도배가 생길 수 있음
이 흐름을 끊기 위해서 새로운 Location 을 지정해서 새로운 정보를 받아 Redirect 된 서버를 호출해서 결과를 받음
이렇게 되면 새로고침을 해도 Location 이 변경되었기 때문에 그 정보만 받아오게 됨
Redirect 가 없다면??? -> 도배 발생

브라우저는 Post 방식으로 전환을 할 수 없어서 Postman 같은 Rest Client 프로그램을 사용

-- INCLUDE 관련
src/main/resources/static 에 view 관련 파일을 넣는다
대부분 이 파일들을 보기 위한 view 설정은 webapp 설정에 가있는 경우가 많다
Spring 의 경우 web.xml 의 설정이 (servlet-mapping) "/" 인데 "/" 로 들어오면 appServlet 이 동작하게 함
나머지 데이터를 처리하기 위해서는 새로운 설정을 잡아줘야 함 (servlet-context.xml, mvc:resources 설정)

static 에 있는 css 등의 파일의 경로 요청이 /board 로 되어있지 않음
절대경로에 맞추어 개발할 것 (/ 로 시작)

index.html 을 list.jsp 에 넣어뒀는데 매번 이 코드 전체를 불러서 처리하는것은 효율적이지 못함
include 폴더로 쪼개서 쓰는것이 효율적임

-- JS 추가 공간 설정
요즘에는 JS 를 아래쪽에 둠 (옛날에는 위에 둠)
JS 는 순차적으로 실행되기 때문에 Header, Body, Footer (특히 Footer)의 JS 가 로딩이 먼저 된 다음 작동하게 해야 함
Footer 에는 </body>, </html> 등으로 html 을 끝내리게 되어 BODY 에 들어갈 JS 를 읽지 못함
해결 방법은
1. Footer 에 있는 JS 를 Header 에 갖다놓음
2. 새로 Include 를 할 수 있는 JSP 를 만들어서 Footer 의 html 닫는 코드만 따로 넣고 BODY 에서 한번 더 Include 함

2번 으로 진행하면 BODY 의 코드가 약간 더 지저분해지긴 하지만 Footer 의 JS 뒤에 직접 개발하는 JS 를 넣을 수 있음
기존의 템플릿도 깨지 않을 수 있음

-- /board/list 개발 완성
실제로 JSP 와 결합을 할만한 데이터를 만들어보자
화면의 모양이 제대로 나오는지 확인하고 데이터를 뿌리자

-- JSTL (list.jsp 에서 처음 사용)
데이터 컬럼 수(th) 는 DB 컬럼과 맞춰주고 데이터 한 건당 For Loop 가 돌아야 함 (JSTL 필요)
1. JSP 표준라이브러리(JSP Standard Tag Library) 이다.
2. JSP에서 (반복과 조건, 데이타 관리 포맷, XML 조작, 데이타베이스 액세스)을 구현하는 커스텀 태그 라이브러리 모음이다.
3. 시간, 날짜, 숫자의 포맷이나 문자열 가공등의 처리에서 비즈니스로직과 프리젠테이션 로직을 분리할 수 있게 해준다.
4. JSTL은 EL(Expression Language)를 사용하여 표현한다.
https://yunamom.tistory.com/179 참조

-- 게시물 등록화면과 처리
<form> 태그 안에 액션과 메서드 지정 후 인풋 태그를 넣는다 (Register 는 POST 방식 주의)
bootstrap input 검색하면 input 태그에 대한 설명과 예제가 많음, 참조할 것!!

-- 모달 (MODAL)
경고창 같은 Alert 는 매우 위험하다 -> JS 와 브라우저의 동작 자체가 멈추기 때문
JQuery 를 더이상 쓰지 않는 추세이기 때문에 결과는 Modal 로 보내는 것이 바람직함

-- 게시물 조회
@PathVariable 을 사용해서 경로 뒤에 변수처럼 동적으로 변하는 값을 줄 수 있도록 함
URI 는 유일무이한 유니크 주소가 되어 어떤 상황과 상관 없이 같은 컨텐츠를 나타냄
예전에는 /read?bno=번호 등으로 처리했으나 요즘에는 아무도 사용하지 않음
가변적인 결과 (오늘의 1페이지가 내일 1페이지가 아니므로) 를 위해서는 사용할 수 있으나 잘 사용하지 않음
고정적인 결과 (특정 컨텐츠) 를 동일하게 나타내기 위해서는 @PathVariable 사용할 것!
조회는 GET 방식으로 함