
어노테이션 적용하려면 반드시 코드가 있어야 함
외부 라이브러리를 가져다 쓸 경우는 코드가 없으므로 설정을 해줘야 함
xml 혹은 java 설정을 해야 하는데 xml 은 스프링, java 는 부트에서 설정

파라미터 수집과 변환
파라미터를 수집할 때는 2가지 방식이 있음
1. DTO 로 바로 수집하기
2. RequestParam 으로 수집하기 http://localhost:8080/sample/ex1?name=이름&age=30 같은 직접 GET 방식으로!

MODEL 이란?
Controller 에서 JSP 로 전달하는 데이터
마트에서 "컨트롤러" 가 "모델" 이라는 카트에 데이터를 담음 -> addAttribute
"모델" 에 들어간 데이터를 JSP 의 ${변수 및 객체 등등} 에 전달함
기존 코딩에서는 상속, 인터페이스를 이용하지만
Spring MVC 에서는 어노테이션을 이용함!! -> 파라미터에 추가만 해주면 됨

Model 타입의 addAttribute 메소드 -> 스프링 MVC에서 컨트롤러에서 뷰로 데이터를 전달하는 데 사용

기능과 목적
데이터 전달: addAttribute 메소드는 컨트롤러에서 뷰로 데이터를 전달하기 위해 사용
컨트롤러에서 처리한 결과나 사용자에게 보여줄 데이터를 모델에 추가하면, 이 데이터는 뷰(JSP, Thymeleaf 등)에서 사용 가능

키-값 쌍 추가: 메소드는 데이터를 키-값 쌍으로 추가
즉, 데이터는 특정 이름(키)으로 식별되며, 이 이름을 사용하여 뷰에서 데이터를 참조할 수 있음

다양한 데이터 타입 지원: addAttribute 는 객체부터 기본 자료형까지 다양한 데이터 타입을 지원
단순한 문자열부터 복잡한 객체, 리스트, 맵 등을 모델에 추가할 수 있습니다.

주요 용도
뷰에 데이터 전달: 주로 컨트롤러가 처리한 비즈니스 로직의 결과를 뷰로 전달할 때 사용
검색 결과, 사용자 정보, 화면에 표시할 목록 등을 모델에 추가하여 뷰에서 활용

동적 컨텐츠 생성: 클라이언트의 요청에 따라 동적으로 생성된 데이터를 뷰로 전달할 때 유용
사용자가 입력한 데이터를 처리한 후 그 결과를 뷰에 보여주는 경우에 addAttribute를 사용하여 데이터를 전달

템플릿 엔진과의 호환성: 다양한 템플릿 엔진(예: JSP, Thymeleaf)에서 모델 데이터를 동일한 방식으로 접근할 수 있도록 지원


09.07
SampleController 의 RedirectAttribute 부터 확인 할 것
ex00.controller.advice 의 CommonExceptionAdvice 클래스, views 의 error_page.jsp 확인할 것

Controller 의 리턴 타입
어노테이션 베이스가 되면 파라미터가 유연해짐
리턴 타입 역시 유연해짐 -> 고정값이 아님, 오버라이딩 개념이 아니기 때문
void -> 메서드의 호출 경로와 동일한 뷰
String -> 지정된 뷰
VO/DTO -> Ajax 를 이용해서 결과 데이터 자체를 전송할 경우, 자바 객체 타입 (Jackson-databind 같은 라이브러리 필요)
ResponseEntity<> -> HTTP 헤더 메시지와 내용물을 같이 전송 -> 그림 등의 데이터를 보낼 때 HTTP 의 Content-Type 과 데이터(바디)를 같이 보내는 등

Model/ModelAndView -> 스프링 1, 2 버전의 리턴 타입 (XXX)
HttpHeaders -> HTTP 헤더 메시지만 전송할 경우 (XXX)

ControllerAdvice -> 컨트롤러에 문제가 생겼을 때 대신 처리해주는 기능을 빼놓은 것 (예외를 던지는 기능)
@ExceptionHandler (예외 클래스)
JSP 에서는 Model 에 전달한 객체 사용 가능

개발 영역 구분 -> 티어

{영속 영역} 테스트를 하는것을 권장
    DB SQL 문 -> MyBatis 의 Mapper.xml ->

{서비스 계층} 테스트가 옵션
    서비스 계층 ->

{컨트롤러}
    컨트롤러 ->

{뷰}
    jsp (결과데이터 출력 + 자바스크립트 핸들링)

웹 에서 가장 먼저 시작하는 것 (책이랑 다름!)
/board/list 경로에서 시작 (GET) -> 화면에는 게시물의 리스트가 나옴
클릭등의 액션으로 /board/register(GET) -> 입력할 수 있는 내용이 나옴
-> 눌러서 등록하는 것은 POST 처리(BoardController 가 처리)
-> list 로 돌아가도록 (Redirect, GET 만 가능한 방식)
-> Post-Redirect-Get, PRG 패턴

board/list 대신 board/get/번호 (GET) 로 돌아가도록 (요즘에는 조회를 분리시키기 때문, 댓글 등의 조회를 처리하기 위해)
-> 조회가 끝나면 수정(/modify/번호), 삭제(/delete/번호) 로 가도록
-> 수정과 삭제가 끝나면 컨트롤러(BoardController) 가 수정과 삭제 처리를 하도록
-> 컨트롤러의 작업이 끝나면 조회 페이지로 다시 가도록 구현, 삭제를 하면 리스트로 가도록

github.com/ckck24/spring2024_part3

MariaDB 는 시퀀스를 사용하지 않아서 데이터가 들어가야지 번호가 생김
